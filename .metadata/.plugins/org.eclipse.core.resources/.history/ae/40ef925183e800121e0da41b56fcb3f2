package LDA.MAIN.INERENCE;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

import LDA.MAIN.Documents;

/**
 * @author Eric
 * this class is work for LdaInference
 */


public class LdaModel2
{
	double[][] phi;/*这个是之前训练得到的*/
	ArrayList<String> indexToTermMap;/*这是之前训练得到的*/
	
	
	int[][] doc;// word index array
	int V, K, M;// vocabulary size, topic number, document number
	int[][] z;// topic label array
	float alpha; // doc-topic dirichlet prior parameter
	float beta; // topic-word dirichlet prior parameter
	int[][] nmk;// given document m, count times of topic k. M*K
	int[][] nkt;// given topic k, count times of term t. K*V
	int[] nmkSum;// Sum for each row in nmk
	int[] nktSum;// Sum for each row in nkt
	double[][] theta;// Parameters for doc-topic distribution M*K
	int iterations;// Times of iterations
	int saveStep;// The number of iterations between two saving
	int beginSaveIters;// Begin save model at this iteration
	
	public LdaModel2(LdaInference.InferenceParameters inferenceParameters,String phiPathName,String phiFileName) throws FileNotFoundException, IOException, ClassNotFoundException
	{
		this.alpha=inferenceParameters.alpha;
		this.beta=inferenceParameters.beta;
		this.iterations=inferenceParameters.iteration;
		this.saveStep=inferenceParameters.saveStep;
		this.beginSaveIters=inferenceParameters.beginSaveIters;
		
		File file=new File(phiPathName,phiFileName);
		ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file));
		phi=(double[][])ois.readObject();
		
		
	}
	
	public void initializeModel(Documents documents)
	{
		indexToTermMap=documents.indexToTermMap;
		
		M = documents.docs.size();
		V = documents.indexToTermMap.size();
		nmk = new int[M][K];
		nkt = new int[K][V];
		theta = new double[M][K];
		nmkSum = new int[M];
		nktSum = new int[K];

		doc = new int[M][];
		for (int i = 0; i < M; i++)
		{
			int N = documents.docs.get(i).docWords.length;
			doc[i] = new int[N];
			for (int j = 0; j < N; j++)
			{
				doc[i][j] = documents.docs.get(i).docWords[j];
			}
		}

		// random to z
		z = new int[M][];
		for (int i = 0; i < M; i++)
		{
			int N = documents.docs.get(i).docWords.length;
			z[i] = new int[N];
			for (int j = 0; j < N; j++)
			{
				int initTopic = (int) (Math.random() * K);
				int termindexInM = documents.docs.get(i).docWords[j];
				z[i][j] = initTopic;
				nmk[i][initTopic] += 1;
				nkt[initTopic][termindexInM] += 1;
				nmkSum[i]++;
				nktSum[initTopic]++;
			}
		}
	}
	
	
	
	
	
	
	
	
	public static class Document
	{
		
	}
	
	
}
